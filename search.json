[{"title":"WPF基础01--WPF基础知识","date":"2023-07-21T03:23:31.000Z","url":"/2023/07/21/WPF%E5%9F%BA%E7%A1%8001-WPF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","tags":[["C#","/tags/C/"],["WPF","/tags/WPF/"]],"categories":[["WPF入门笔记","/categories/WPF%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"]],"content":"为什么选择WPFWPF全称Windows Presentation Foundation，翻译中文即“Windows呈现基础”,由微软2007年推出的Windows桌面应用框架,是基于XML、NET、矢量的呈现引擎，可以创建适用于 Windows 且具有非凡视觉效果的桌面客户端应用程序。 前端界面由XAML支持：WPF使用XAML（Extensible Application Markup Language）作为界面描述语言，使开发人员能够以声明性的方式定义用户界面，并将其与后端逻辑分离，提高了开发效率和可维护性。 强大的数据绑定：WPF提供了强大的数据绑定机制，使开发人员能够轻松地将数据与用户界面元素关联起来，实现数据驱动的应用程序开发。 矢量图形：WPF 的核心是一个与分辨率无关且基于矢量的呈现引擎，旨在充分利用现代图形硬件。使得WPF编写的桌面应用十分美观，且WPF作为一个成熟的框架，具有庞大的开发人员社区和丰富的第三方资源。 标记语言XAML 什么是XAMLXAML 是一种声明性标记语言。是构建WPF应用UI的语言，你可以在声明性 XAML 标记中创建可见的 UI 元素，然后使用代码隐藏文件（这些文件通过分部类定义与标记相联接）将 UI 定义与运行时逻辑相分离。 XAML 直接以程序集中定义的一组特定后备类型表示对象的实例化。 这与大多数其他标记语言不同，后者通常是与后备类型系统没有此类直接关系的解释语言。 XAML 实现了一个工作流，通过此工作流，各方可以采用不同的工具来处理 UI 和应用的逻辑。 语法概述 XAML对象元素 上面例子指定了两个对象：&lt;StackPanel&gt;和&lt;Button &#x2F;&gt;。对象元素 StackPanel 和 Button 各映射到一个类名，该类由 WPF 定义并且属于 WPF 程序集。 指定对象元素标记时，会创建一条指令，指示 XAML 处理创建基础类型的新实例。 每个实例都是在分析和加载 XAML 时通过调用基础类型的无参数构造函数来创建。 属性 类似Background=&quot;Blue&quot; Foreground=&quot;Red&quot; Content=&quot;This is a button&quot;就是对象&lt;Button&#x2F;&gt;的三个属性，分别表示&lt;Button&#x2F;&gt;的背景颜色为蓝色、文本颜色为红色、显示文本是This is a button。 属性元素语法 属性元素语法是属性的另一种表示形式。例如上面例子可以写成如下形式。 集合语法 上面例子表示Grid三行三列，演示了用于设置RowDefinitions属性和ColumnDefinitions属性的值的集合语法。 附加属性通过上面例子我们知道Grid需要ColumnDefinitions和RowDefinitions集合的属性元素来定义行和列。但是，程序员还必须通过某种方式来指示 的每个子项 Grid 所在的行和列。 在 的每个子元素的 Grid 标记中，使用以下属性指定该子级的行和列： Grid.Row Grid.Column 还可以使用这些属性指示子级是否跨多个行或多列 Grid.RowSpan Grid.ColumnSpan 示例 XAML 内容属性XAML 指定了一个语言功能，通过该功能，类可以指定它的一个且仅一个属性为 XAML 内容 属性。 该对象元素的子元素用于设置该内容属性的值。换言之，仅对内容属性而言，可以在 XAML 标记中设置该属性时省略属性元素，并在标记中生成更直观的父级&#x2F;子级形式。 标记拓展标记扩展是一个 XAML 语言概念。 用于提供属性的值时，大括号{}表示标记扩展用法。WPF 应用编程中最常用的标记扩展是 Binding（用于数据绑定表达式）以及资源引用 StaticResource 和 DynamicResource。 通过使用标记扩展，即使属性通常不支持特性语法，也可以使用特性语法为属性提供值。 标记扩展经常使用中间表达式类型实现一些功能，例如，推迟值或引用仅在运行时才存在的其他对象。 示例 根元素和命名空间上面截图里面根元素是Window,根元素还包含特性 xmlns 和 xmlns:x、xmlns:d、xmlns:mc、xmlns:local，这些特性指向各自的命名空间。 A Sample WPF VisualStudio的重要部分 Visual Studio 的重要部分Visual Studio 中对 WPF 的支持包含五个在创建应用时你将与之交互的重要组件： 工具箱工具箱包含可添加到窗体的所有控件。 若要将控件添加到当前窗体，请双击控件或拖放控件。 XAML 设计器这是 XAML 文档的设计器。 它是交互式的，可以从“工具箱”拖放对象。 通过在设计器中选择和移动项，可以直观地为应用构建用户界面 (UI)。当设计器和编辑器都可见时，对设计器的更改会反映在编辑器中，反之亦然。 在设计器中选择项目时，“属性”窗格会显示有关该对象的属性和特性。 XAML 代码编辑器这是 XAML 文档的 XAML 代码编辑器。 XAML 代码编辑器是一种无需设计器即可手动创建 UI 的方法。 将控件添加到设计器中时，设计器可以推断控件上的属性值。 XAML 代码编辑器则为你提供更多控制权。当设计器和编辑器都可见时，对设计器的更改会反映在编辑器中，反之亦然。 在代码编辑器中导航文本插入点时，“属性”窗格会显示有关该对象的属性和特性。 解决方案资源管理器所有项目文件、代码、窗口、资源都将显示在此窗格中。 属性此窗格显示可以基于所选项进行配置的属性设置。 例如，如果从“解决方案资源管理器”中选择一个项，你会看到与该文件相关的属性设置。 如果在“设计器”中选择一个对象，你会看到该项目的设置。 命名空间、布局、添加控件 命名空间、布局、添加控件 文档根 &lt;Window&gt; 表示 XAML 文件描述的对象的类型。 它声明八个特性，这些特性通常分为三类： 命名空间XML 命名空间为 XML 提供结构，确定可在文件中声明的 XML 内容。 主要 xmlns 特性将导入整个文件的 XML 命名空间，在本例中，将映射到 WPF 声明的类型。 其他 XML 命名空间声明一个前缀，并导入 XAML 文件的其他类型和对象。 例如，xmlns:local 命名空间声明 local 前缀，并映射到项目声明的对象，即，在 Names 代码命名空间中声明的对象。 x:Class 特性 此特性将 &lt;Window&gt; 映射到代码定义的类型：MainWindow.xaml.cs 或 MainWindow.xaml.vb 文件，即 Names.MainWindow 类。 Title 特性 在 XAML 对象上声明的任何常规特性都会设置该对象的属性。 在本例中，Title 特性将设置 Window.Title 属性。 布局 上面代码使用了Grid布局定义两行两列，将网格划分为四个单元格。 添加控件 为 Click 事件添加代码我们创建的 &lt;Button&gt; 具有一个 Click 事件，该事件在用户按下按钮时引发。 你可以订阅此事件并添加代码，以便向列表框添加名称。 就像通过添加 XAML 特性在控件上设置属性一样，你可以使用 XAML 特性来订阅事件。 将 Click 特性设置为 ButtonAddName_Click 5.运行应用 "},{"title":"C#关键字partial","date":"2023-07-04T05:23:58.000Z","url":"/2023/07/04/C-%E5%85%B3%E9%94%AE%E5%AD%97partial/","tags":[["C#","/tags/C/"]],"categories":[["C#","/categories/C/"]],"content":"前言partial是分部类型，可以将一个类、接口或结构、方法分成多个部分，便于管理。在编译时会将所有部分组合起来，与普通类并无多大区别，但需要注意累加效应。 分部类以下情况需要拆分类定义 处理大型项目时，使一个类分布于多个独立文件中可以让多位程序员同时对该类进行处理。 当使用自动生成的源文件时，你可以添加代码而不需要重新创建源文件。 Visual Studio 在创建Windows 窗体、Web 服务包装器代码等时会使用这种方法。 你可以创建使用这些类的代码，这样就不需要修改由Visual Studio生成的文件。 累加效应 分部类各个部分可以指定不同的基接口，最终类型将实现所有分部声明所列出的全部接口。 分部类编译时会对分部类型定义的属性进行合并 分部方法分部类或结构可以包含分部方法。 类的一个部分包含方法的签名。 可以在同一部分或另一部分中定义实现。 如果未提供该实现，则会在编译时删除方法以及对方法的所有调用。分部方法允许类的某个部分的实现者声明方法。 类的另一部分的实现者可以定义该方法。 在以下两个情形中，此方法很有用：生成样板代码的模板和源生成器。 模板代码：模板保留方法名称和签名，以使生成的代码可以调用方法。 这些方法遵循允许开发人员决定是否实现方法的限制。 如果未实现该方法，编译器会删除方法签名以及对该方法的所有调用。 调用该方法（包括调用中的任何参数计算结果）在运行时没有任何影响。 因此，分部类中的任何代码都可以随意地使用分部方法，即使未提供实现也是如此。 调用但不实现该方法不会导致编译时错误或运行时错误。 源生成器：源生成器提供方法的实现。 开发人员可以添加方法声明（通常由源生成器读取属性）。 开发人员可以编写调用这些方法的代码。 源生成器在编译过程中运行并提供实现。 在这种情况下，不会遵循不经常实现的分部方法的限制。 使用限制 partial 修饰符不可用于委托或枚举声明中。 同一个类型的各个部分必须有修饰符partial。 要成为同一类型的各个部分的所有分部类型定义都必须在同一程序集和同一模块（.exe 或 .dll 文件）中进行定义。 分部定义不能跨越多个模块。 你可以为已定义并实现的分部方法生成委托，但不能为已经定义但未实现的分部方法生成委托。 "},{"title":"Hello Blog","date":"2023-06-14T08:37:44.000Z","url":"/2023/06/14/Image/","tags":[["images","/tags/images/"]],"categories":[["undefined",""]],"content":"昨天看鱼友们写的博客，感觉挺酷的，自己也弄了个，也不知道写点啥，就放点图片吧。以后的话这里应该会记录一些自己的学习笔记，共勉。 Imagesscenery animation "},{"title":"测试","date":"2023-06-14T02:46:38.000Z","url":"/2023/06/14/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","tags":[["git","/tags/git/"]],"categories":[["undefined",""]],"content":" 简介Git是分布式版本控制系统 分布式版本控制系统，重点在于分布。分布的含义不是说每台计算机上只留有版本库的一部分。恰恰相反，分布的含义是每台计算机上都还有一个完整的版本库。这个时候，你的修改仅仅需要提交给本地的版本库进行保存就可以了。 不同于集中式版本控制系统的“中央服务器”，分布式版本控制系统可以通过推送版本库，实现不同的计算机之间的版本共享。什么意思呢？就是说对于同一个文件A，如果两个人同时对A文件进行了修改，最新的版本应该都保存在各自的计算机中，想要实现协同开发，只需要将各自的最新版本库推送给对方，就可以得到最新的版本库了。 但是这里面有个问题，就是一个团队很大的情况下，大家都去修改，到底找谁同步版本库，不乱套了嘛。而且，大的开发项目也不是简单的两台计算机之间的版本互推就可以得到完整的版本库的。所以，分布式版本控制系统中通常也会有一台充当“中央服务器”的计算机，大家都把版本推送到这台计算机上，而需要同步的人只需同步这一台固定的计算机就可以。 所谓的分布式管理中的“中央服务器”是用来“交换意见”，或者说充当中介作用的。每一台计算机通过和这台固定的中介交换意见以后，都会拥有完整的版本库。 Windows安装Gitwindows上使用Git，可以从Git官网下载安装程序，默认安装。安装完成后找到Git Bash完成下列设置 Git是分布式版本控制系统，所以每个机器都需自报家门。 常用基本命令 git init 建立版本库 git add 把要提交的东西添加到暂存区。commit时将会把暂存区的内容提交。 git commit 把暂存区的所有内容提交到当前分支。 git branch 操作Git分支的命令 git clone 克隆远程存储库到本地（克隆的是整个远程库） git config 用来配置Git的相关参数 Git三个配置文件 仓库级的配置文件：在仓库的 .git&#x2F;.gitconfig，该配置文件只对所在的仓库有效。 全局配置文件：Mac 系统在 ~&#x2F;.gitconfig，Windows 系统在 C:\\Users&lt;用户名&gt;.gitconfig。 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 &#x2F;usr&#x2F;local&#x2F;git）的 etc 文件夹中的 gitconfig。 git fetch 更新本地仓库 git log git merge 分支合并 git mv git pull 从远程仓库获取最新版本并合并到本地。 首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。 git push 把本地仓库的提交推送到远程仓库。 git remote 操作远程库。 git tag 操作标签的命令。 "},{"title":"Hello World","date":"2023-06-14T01:58:36.733Z","url":"/2023/06/14/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]